% class used to contain the state of a frame (in terms of tempo, phase, etc.)
% for use with the bp_viterbi class
% see musical_model.m for a description of the following model

classdef model_state

properties
	% tempo period (in seconds): i.e. time between beats
	tempo_period;
	% tempo period (in samples). Related to tempo_period by the feature_sample_rate,
	% which could also be stored here, but isn't currently.
	tempo_samples;
	% time when the latest beat was in the current frame.
	% measured in absolute time (i.e. with respect to 0 seconds of audio)
	beat_location;

	% original calculation of the beat location, made relative to the end of the
	% frame this state was generated by. Units are in samples.
	% Note the formula:
	% beat_location = frame_end_time - beat_alignment/feature_sample_rate
	beat_alignment;
	
	% the ending time of the feature frame for which this state was created.
	% the beat location should never be greater than this time. (since otherwise
	% that would be a prediction).
	frame_end_time;

end % properties

properties (Dependent)
	tempo_bpm;
end

methods
	% constructor
	function state = model_state(tempo_period, tempo_samples, beat_location, ...
		beat_alignment, frame_end_time)
		if nargin == 0
			warning('model_state class constructed with default values');
			state.tempo_period = 0;
			state.tempo_samples = 0;
			state.beat_location = 0;
			state.beat_alignment = 0;
			state.frame_end_time = 0;
		else
			state.tempo_period = tempo_period;
			state.tempo_samples = tempo_samples;
			state.beat_location = beat_location;
			state.beat_alignment = beat_alignment;
			state.frame_end_time = frame_end_time;
		end
	end

	function t = get.tempo_bpm(this)
		t = 60/this.tempo_period;
	end

end % methods

end
